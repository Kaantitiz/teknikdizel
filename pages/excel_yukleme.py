import streamlit as st
import pandas as pd
import numpy as np
import os
from datetime import datetime
from collections import defaultdict

# Sayfa baÅŸlÄ±ÄŸÄ± ve ikonu
st.set_page_config(page_title="Excel YÃ¶netimi ve DÃ¶nÃ¼ÅŸtÃ¼rme", page_icon="ðŸ“Š", layout="wide")

st.markdown("<h1 style='text-align: center;'>Excel YÃ¶netimi ve DÃ¶nÃ¼ÅŸtÃ¼rme</h1>", unsafe_allow_html=True)

# KlasÃ¶r ayarlarÄ±
UPLOAD_FOLDER = "uploaded_files"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# KullanÄ±cÄ± seÃ§imi: Yeni dosya yÃ¼kle veya mevcut bir dosyayÄ± seÃ§
option = st.radio(
    "SeÃ§im YapÄ±n:",
    ("Yeni Excel DosyasÄ± YÃ¼kle", "KayÄ±tlÄ± Bir DosyayÄ± SeÃ§")
)

uploaded_file = None
selected_file = None

if option == "Yeni Excel DosyasÄ± YÃ¼kle":
    # Tarih seÃ§imi
    selected_date = st.date_input("LÃ¼tfen tarih seÃ§in", value=None)

    if selected_date is None:
        st.warning("LÃ¼tfen bir tarih seÃ§in.")
    else:
        # Tarihi TÃ¼rkÃ§e olarak formatla
        turkish_months = [
            "Ocak", "Åžubat", "Mart", "Nisan", "MayÄ±s", "Haziran",
            "Temmuz", "AÄŸustos", "EylÃ¼l", "Ekim", "KasÄ±m", "AralÄ±k"
        ]
        formatted_date = f"{selected_date.day} {turkish_months[selected_date.month - 1]} {selected_date.year}"
        st.write(f"SeÃ§ilen Tarih: {formatted_date}")

        uploaded_file = st.file_uploader("Bir Excel dosyasÄ± yÃ¼kleyin (.xlsx veya .xls)", type=["xlsx", "xls"])
        
        if uploaded_file is not None:
            date_str = selected_date.strftime("%Y-%m-%d")
            file_name = f"{date_str}.xlsx"
            file_path = os.path.join(UPLOAD_FOLDER, file_name)
            
            if os.path.exists(file_path):
                st.warning(f"Bu dosya zaten sistemde bulunuyor: {file_name}")
            else:
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.success(f"DosyanÄ±z baÅŸarÄ±yla eklenmiÅŸtir. Dosya AdÄ±: {file_name}")

elif option == "KayÄ±tlÄ± Bir DosyayÄ± SeÃ§":
    files = [f for f in os.listdir(UPLOAD_FOLDER) if f.endswith((".xlsx", ".xls"))]
    
    def is_valid_date_format(filename):
        try:
            date_part = filename.split(".")[0]
            datetime.strptime(date_part, "%Y-%m-%d")
            return True
        except ValueError:
            return False

    valid_files = [f for f in files if is_valid_date_format(f)]
    
    if valid_files:
        files_with_prompt = ["LÃ¼tfen bir dosya seÃ§in"] + valid_files
        selected_file = st.selectbox("Bir dosya seÃ§in:", files_with_prompt)
        
        if selected_file != "LÃ¼tfen bir dosya seÃ§in":
            st.info(f"SeÃ§ilen dosya iÅŸleniyor: {selected_file}")
            file_path = os.path.join(UPLOAD_FOLDER, selected_file)
            
            df = pd.read_excel(file_path)
            df['SÃ¼rÃ¼cÃ¼'] = df['SÃ¼rÃ¼cÃ¼'].fillna("DaÄŸÄ±tÄ±m AracÄ±")

            if 'HÄ±z (km/sa) ' in df.columns:
                df['HÄ±z (km/sa) '] = df['HÄ±z (km/sa) '].astype(str).str.replace(',', '').astype(float)
            if 'Yol (km)' in df.columns:
                df['Yol (km)'] = df['Yol (km)'].astype(str).str.replace(',', '').astype(float)

            new_df = pd.DataFrame(columns=[
                "PLAKA", "SÃœRÃœCÃœ", "TARÄ°H", "KONTAK AÃ‡ILMA", "Ä°L", "AKÅžAM KONAKLAMA Ä°L",
                "VARIÅž SAATÄ° EVE YA DA OTELE", "GÃœNE BAÅžLAMA KM", "GÃœN BÄ°TÄ°RME KM", "YAPILAN KM",
                "MESAÄ° DIÅžI KM", "GECE KULLANIMI", "Ä°ZÄ°N DURUMU", "EN YÃœKSEK HIZ", "YORUM", "ARAÃ‡ SAHÄ°BÄ° DIÅžI (KM)"
            ])

            df['Tarih'] = pd.to_datetime(df['Tarih'])

            for plaka in df['Plaka'].unique():
                plaka_df = df[df['Plaka'] == plaka]
                sÃ¼rÃ¼cÃ¼ = plaka_df['SÃ¼rÃ¼cÃ¼'].iloc[0]
                tarih = plaka_df['Tarih'].iloc[0].strftime("%Y-%m-%d")

                # Kontak AÃ§Ä±lma
                kontak_aÃ§Ä±lma_df = plaka_df[(plaka_df['Zaman'] > "05:00") & (plaka_df['Ä°leti Tipi'] == "Kontak AÃ§Ä±ldÄ±")]
                kontak_aÃ§Ä±lma = kontak_aÃ§Ä±lma_df.sort_values(by='Zaman').iloc[0]['Zaman'] if not kontak_aÃ§Ä±lma_df.empty else None

                # GÃ¼n Bitirme KM
                gÃ¼n_bitirme_df = plaka_df[(plaka_df['Zaman'] <= "23:59") & (plaka_df['Ä°leti Tipi'].isin(["Kontak KapalÄ±", "Kontak AÃ§Ä±ldÄ±"]))]
                gÃ¼n_bitirme_km = gÃ¼n_bitirme_df.sort_values(by='Zaman').iloc[-1]['Yol (km)'] if not gÃ¼n_bitirme_df.empty else None

                # Ä°l bilgisi
                ilk_zaman_adres = plaka_df.sort_values(by='Zaman').iloc[0]['Adres']
                il = str(ilk_zaman_adres).split(", ")[0] if not pd.isna(ilk_zaman_adres) and isinstance(ilk_zaman_adres, str) else "Bilinmiyor"

                # AkÅŸam konaklama ili
                son_zaman_adres = plaka_df.sort_values(by='Zaman').iloc[-1]['Adres']
                akÅŸam_konaklama_il = str(son_zaman_adres).split(", ")[0] if not pd.isna(son_zaman_adres) and isinstance(son_zaman_adres, str) else "Bilinmiyor"

                # VarÄ±ÅŸ saati
                varÄ±ÅŸ_saati_df = plaka_df[(plaka_df['Zaman'] > "18:00") & (plaka_df['Ä°leti Tipi'] == "Kontak KapalÄ±")]
                if not varÄ±ÅŸ_saati_df.empty:
                    varÄ±ÅŸ_saati = varÄ±ÅŸ_saati_df.sort_values(by='Zaman').iloc[0]['Zaman']
                else:
                    varÄ±ÅŸ_saati_df = plaka_df[(plaka_df['Zaman'] <= "18:00") & (plaka_df['Ä°leti Tipi'] == "Kontak KapalÄ±")]
                    varÄ±ÅŸ_saati = varÄ±ÅŸ_saati_df.sort_values(by='Zaman').iloc[-1]['Zaman'] if not varÄ±ÅŸ_saati_df.empty else None

                # GÃ¼ne baÅŸlama KM
                gÃ¼ne_baÅŸlama_km = plaka_df[plaka_df['Zaman'] < "18:00"]['Yol (km)'].min()

                # YapÄ±lan KM
                yapÄ±lan_km = gÃ¼n_bitirme_km - gÃ¼ne_baÅŸlama_km if gÃ¼n_bitirme_km is not None and gÃ¼ne_baÅŸlama_km is not None else np.nan

                # Mesai DÄ±ÅŸÄ± KM
                mesai_dÄ±ÅŸÄ±_km = 0
                kontak_kapalÄ±_df = plaka_df[(plaka_df['Zaman'] > "18:00") & (plaka_df['Ä°leti Tipi'] == "Kontak KapalÄ±")]
                kontak_aÃ§Ä±ldÄ±_df = plaka_df[(plaka_df['Zaman'] > "18:00") & (plaka_df['Ä°leti Tipi'] == "Kontak AÃ§Ä±ldÄ±")]
                if not kontak_kapalÄ±_df.empty and not kontak_aÃ§Ä±ldÄ±_df.empty:
                    son_kontak_kapalÄ± = kontak_kapalÄ±_df.sort_values(by='Zaman').iloc[-1]
                    ilk_kontak_aÃ§Ä±ldÄ± = kontak_aÃ§Ä±ldÄ±_df.sort_values(by='Zaman').iloc[0]
                    mesai_dÄ±ÅŸÄ±_km = abs(son_kontak_kapalÄ±['Yol (km)'] - ilk_kontak_aÃ§Ä±ldÄ±['Yol (km)'])

                # Gece kullanÄ±mÄ± kontrolÃ¼ (00:00-06:00 arasÄ±)
                def check_night_usage(plaka_df):
                    night_events = plaka_df[
                        (plaka_df['Zaman'] >= "00:00") & 
                        (plaka_df['Zaman'] < "06:00") & 
                        (plaka_df['Ä°leti Tipi'].isin(["Kontak AÃ§Ä±ldÄ±", "Kontak KapalÄ±"]))
                    ]
                    return "KullanÄ±ldÄ±" if not night_events.empty else "KullanÄ±lmadÄ±"

                # En yÃ¼ksek hÄ±z hesaplama
                if 'HÄ±z (km/sa) ' in plaka_df.columns:
                    try:
                        hiz_verileri = (
                            plaka_df['HÄ±z (km/sa) ']
                            .astype(str)
                            .str.replace(',', '.')
                            .replace(r'[^\d.]', '', regex=True)
                            .replace('', np.nan)
                            .replace('0', np.nan)
                            .dropna()
                            .astype(float)
                        )
                        
                        if not hiz_verileri.empty:
                            en_yÃ¼ksek_hÄ±z = hiz_verileri.max()
                            en_yÃ¼ksek_hÄ±z = f"{en_yÃ¼ksek_hÄ±z:.2f}".replace('.', ',')
                        else:
                            en_yÃ¼ksek_hÄ±z = "0"
                            
                    except Exception as e:
                        st.error(f"HÄ±z hesaplama hatasÄ±: {str(e)}")
                        en_yÃ¼ksek_hÄ±z = "HesaplanamadÄ±"
                else:
                    en_yÃ¼ksek_hÄ±z = "SÃ¼tun Yok"

                # YORUM sÃ¼tunu - GÃœNCELLENMÄ°Åž VERSÄ°YON
                yorum = ""
                previous_location = None
                location_changes = []

                kontak_events = plaka_df[plaka_df['Ä°leti Tipi'].isin(["Kontak AÃ§Ä±ldÄ±", "Kontak KapalÄ±"])].sort_values(by='Zaman')
                for _, event in kontak_events.iterrows():
                    current_address = event['Adres']
                    if pd.isna(current_address) or isinstance(current_address, (float, int)):
                        current_location = "Bilinmiyor"
                    else:
                        parts = [p.strip() for p in str(current_address).split(",") if p.strip()]
                        if len(parts) >= 2:
                            current_location = (parts[0], parts[1])  # (il, ilÃ§e) tuple'Ä± olarak sakla
                        else:
                            current_location = (parts[0], "") if parts else ("Bilinmiyor", "")
                    
                    if previous_location is None or current_location != previous_location:
                        location_changes.append(current_location)
                        previous_location = current_location

                if location_changes:
                    # Åžehirleri grupla
                    city_districts = defaultdict(list)
                    for city, district in location_changes:
                        if city and district:  # Hem il hem ilÃ§e varsa
                            city_districts[city].append(district)
                    
                    # Ä°stanbul ve Ankara iÃ§in Ã¶zel iÅŸlem
                    istanbul_districts = []
                    ankara_districts = []
                    other_cities = []
                    
                    for city, districts in city_districts.items():
                        if "Ä°stanbul" in city:
                            istanbul_districts.extend(districts)
                        elif "Ankara" in city:
                            ankara_districts.extend(districts)
                        else:
                            # DiÄŸer ÅŸehirler iÃ§in il - ilÃ§e, ilÃ§e formatÄ±
                            unique_districts = sorted(list(set(districts)))
                            if unique_districts:
                                other_cities.append(f"{city}: {', '.join(unique_districts)}")
                            else:
                                other_cities.append(city)
                    
                    # Yorum parÃ§alarÄ±nÄ± oluÅŸtur
                    yorum_parts = []
                    
                    if istanbul_districts:
                        unique_districts = sorted(list(set(istanbul_districts)))
                        yorum_parts.append("Ä°STANBUL: " + ", ".join(unique_districts))
                    
                    if ankara_districts:
                        unique_districts = sorted(list(set(ankara_districts)))
                        yorum_parts.append("ANKARA: " + ", ".join(unique_districts))
                    
                    if other_cities:
                        yorum_parts.append(" " + " | ".join(other_cities))
                    
                    yorum = " | ".join(yorum_parts) if yorum_parts else "AraÃ§ KullanÄ±lmadÄ±"
                else:
                    yorum = "AraÃ§ KullanÄ±lmadÄ±"

                new_row = {
                    "PLAKA": plaka,
                    "SÃœRÃœCÃœ": sÃ¼rÃ¼cÃ¼,
                    "TARÄ°H": tarih,
                    "KONTAK AÃ‡ILMA": kontak_aÃ§Ä±lma,
                    "Ä°L": il,
                    "AKÅžAM KONAKLAMA Ä°L": akÅŸam_konaklama_il,
                    "VARIÅž SAATÄ° EVE YA DA OTELE": varÄ±ÅŸ_saati,
                    "GÃœNE BAÅžLAMA KM": gÃ¼ne_baÅŸlama_km,
                    "GÃœN BÄ°TÄ°RME KM": gÃ¼n_bitirme_km,
                    "YAPILAN KM": yapÄ±lan_km,
                    "MESAÄ° DIÅžI KM": mesai_dÄ±ÅŸÄ±_km,
                    "GECE KULLANIMI": check_night_usage(plaka_df),
                    "Ä°ZÄ°N DURUMU": np.nan,
                    "EN YÃœKSEK HIZ": en_yÃ¼ksek_hÄ±z,
                    "YORUM": yorum,
                    "ARAÃ‡ SAHÄ°BÄ° DIÅžI (KM)": np.nan
                }

                new_df = pd.concat([new_df, pd.DataFrame([new_row])], ignore_index=True)

            st.markdown("<h2 style='text-align: center;'>DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ Veriler</h2>", unsafe_allow_html=True)
            st.write(new_df)

            output_file = os.path.join(UPLOAD_FOLDER, f"donusturulmus_{selected_file}")
            new_df.to_excel(output_file, index=False, engine="openpyxl")

            with open(output_file, "rb") as file:
                st.download_button(
                    label="DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ Verileri Ä°ndir",
                    data=file,
                    file_name=f"donusturulmus_{selected_file}",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
    else:
        st.warning("HenÃ¼z bir dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ dosya bulunmamaktadÄ±r.")
